@page "/livros/delete"
@using Microsoft.EntityFrameworkCore
@using TJRJApp.Models
@inject IDbContextFactory<TJRJApp.Context.BasisContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Livro</h2>
    <hr />
    @if (livro is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Titulo</dt>
            <dd class="col-sm-10">@livro.Titulo</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Editora</dt>
            <dd class="col-sm-10">@livro.Editora</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Edicao</dt>
            <dd class="col-sm-10">@livro.Edicao</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">AnoPublicacao</dt>
            <dd class="col-sm-10">@livro.AnoPublicacao</dd>
        </dl>
        <EditForm method="post" Model="livro" OnValidSubmit="DeleteLivro" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(livro is null)">Delete</button> |
            <a href="/livros">Voltar</a>
        </EditForm>
    }
</div>

@code {
    private Livro? livro;

    [SupplyParameterFromQuery]
    private int LivroCodl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        livro = await context.Livros.FirstOrDefaultAsync(m => m.LivroCodl == LivroCodl);

        if (livro is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteLivro()
    {
        using var context = DbFactory.CreateDbContext();
        context.Livros.Remove(livro!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/livros");
    }
}
